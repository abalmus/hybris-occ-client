/**
 * OCC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CatalogListWsDTOModel from '../models/CatalogListWsDTOModel';
import CatalogVersionWsDTOModel from '../models/CatalogVersionWsDTOModel';
import CatalogWsDTOModel from '../models/CatalogWsDTOModel';
import CategoryHierarchyWsDTOModel from '../models/CategoryHierarchyWsDTOModel';

/**
* Catalogs service.
* @module api/CatalogsApi
* @version v2
*/
export default class CatalogsApi {

    /**
    * Constructs a new CatalogsApi. 
    * @alias module:api/CatalogsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Catalogs
     * Returns all catalogs with versions defined for the base store. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CatalogListWsDTOModel} and HTTP response
     */
    catalogsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogListWsDTOModel;

      return this.apiClient.callApi(
        '/catalogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Catalogs
     * Returns all catalogs with versions defined for the base store. 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CatalogListWsDTOModel}
     */
    getCatalogs(opts) {
      return this.catalogsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * getCatalog
     * Returns a information about a catalog based on its ID, along with versions defined for the current base store. 
     * @param {String} catalogId Catalog identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CatalogWsDTOModel} and HTTP response
     */
    catalogsByCatalogIdWithHttpInfo(catalogId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalog");
      }

      let pathParams = {
        'catalogId': catalogId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogWsDTOModel;

      return this.apiClient.callApi(
        '/catalogs/{catalogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getCatalog
     * Returns a information about a catalog based on its ID, along with versions defined for the current base store. 
     * @param {String} catalogId Catalog identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CatalogWsDTOModel}
     */
    getCatalog(catalogId, opts) {
      return this.catalogsByCatalogIdWithHttpInfo(catalogId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * CatalogsByCatalogIdAndCatalogVersionId
     * Returns information about catalog version that exists for the current base store. 
     * @param {String} catalogId Catalog identifier
     * @param {String} catalogVersionId Catalog version identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CatalogVersionWsDTOModel} and HTTP response
     */
    catalogsByCatalogIdAndCatalogVersionIdWithHttpInfo(catalogId, catalogVersionId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCatalogsByCatalogIdAndCatalogVersionId");
      }

      // verify the required parameter 'catalogVersionId' is set
      if (catalogVersionId === undefined || catalogVersionId === null) {
        throw new Error("Missing the required parameter 'catalogVersionId' when calling getCatalogsByCatalogIdAndCatalogVersionId");
      }

      let pathParams = {
        'catalogId': catalogId,
        'catalogVersionId': catalogVersionId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogVersionWsDTOModel;

      return this.apiClient.callApi(
        '/catalogs/{catalogId}/{catalogVersionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * CatalogsByCatalogIdAndCatalogVersionId
     * Returns information about catalog version that exists for the current base store. 
     * @param {String} catalogId Catalog identifier
     * @param {String} catalogVersionId Catalog version identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CatalogVersionWsDTOModel}
     */
    getCatalogsByCatalogIdAndCatalogVersionId(catalogId, catalogVersionId, opts) {
      return this.catalogsByCatalogIdAndCatalogVersionIdWithHttpInfo(catalogId, catalogVersionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

    /**
     * getCategory
     * Returns information about category that exists in a catalog version available for the current base store. 
     * @param {String} catalogId Catalog identifier
     * @param {String} catalogVersionId Catalog version identifier
     * @param {String} categoryId Category identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CategoryHierarchyWsDTOModel} and HTTP response
     */
    catalogsCategoriesCategoryIdByCatalogIdWithHttpInfo(catalogId, catalogVersionId, categoryId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'catalogId' is set
      if (catalogId === undefined || catalogId === null) {
        throw new Error("Missing the required parameter 'catalogId' when calling getCategory");
      }

      // verify the required parameter 'catalogVersionId' is set
      if (catalogVersionId === undefined || catalogVersionId === null) {
        throw new Error("Missing the required parameter 'catalogVersionId' when calling getCategory");
      }

      // verify the required parameter 'categoryId' is set
      if (categoryId === undefined || categoryId === null) {
        throw new Error("Missing the required parameter 'categoryId' when calling getCategory");
      }

      let pathParams = {
        'catalogId': catalogId,
        'catalogVersionId': catalogVersionId,
        'categoryId': categoryId
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'currentPage': opts['currentPage'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CategoryHierarchyWsDTOModel;

      return this.apiClient.callApi(
        '/catalogs/{catalogId}/{catalogVersionId}/categories/{categoryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getCategory
     * Returns information about category that exists in a catalog version available for the current base store. 
     * @param {String} catalogId Catalog identifier
     * @param {String} catalogVersionId Catalog version identifier
     * @param {String} categoryId Category identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CategoryHierarchyWsDTOModel}
     */
    getCategory(catalogId, catalogVersionId, categoryId, opts) {
      return this.catalogsCategoriesCategoryIdByCatalogIdWithHttpInfo(catalogId, catalogVersionId, categoryId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }

}
