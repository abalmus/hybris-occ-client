/**
 * OCC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddressListWsDTOModel from '../models/AddressListWsDTOModel';
import AddressWsDTO296Model from '../models/AddressWsDTO296Model';
import AddressWsDTOModel from '../models/AddressWsDTOModel';
import CartListWsDTOModel from '../models/CartListWsDTOModel';
import CartWsDTOModel from '../models/CartWsDTOModel';
import DeliveryModeListWsDTOModel from '../models/DeliveryModeListWsDTOModel';
import DeliveryModeWsDTOModel from '../models/DeliveryModeWsDTOModel';
import OrderEntryListWsDTOModel from '../models/OrderEntryListWsDTOModel';
import OrderEntryWsDTO542Model from '../models/OrderEntryWsDTO542Model';
import OrderEntryWsDTOModel from '../models/OrderEntryWsDTOModel';
import OrderHistoryListWsDTOModel from '../models/OrderHistoryListWsDTOModel';
import OrderWsDTOModel from '../models/OrderWsDTOModel';
import PaymentDetailsListWsDTOModel from '../models/PaymentDetailsListWsDTOModel';
import PaymentDetailsWsDTO640Model from '../models/PaymentDetailsWsDTO640Model';
import PaymentDetailsWsDTOModel from '../models/PaymentDetailsWsDTOModel';
import PromotionResultListWsDTOModel from '../models/PromotionResultListWsDTOModel';
import SaveCartResultWsDTOModel from '../models/SaveCartResultWsDTOModel';
import UserGroupListWsDTOModel from '../models/UserGroupListWsDTOModel';
import UserSignUpWsDTOModel from '../models/UserSignUpWsDTOModel';
import UserWsDTO286Model from '../models/UserWsDTO286Model';
import UserWsDTOModel from '../models/UserWsDTOModel';
import VoucherListWsDTOModel from '../models/VoucherListWsDTOModel';

/**
* Users service.
* @module api/UsersApi
* @version v2
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * postUsers
     * Registers a customer. The following two sets of parameters are available: &lt;ul&gt; &lt;li&gt;First set is used to register a customer. In this case the required parameters are: login, password, firstName, lastName, titleCode.&lt;/li&gt; &lt;li&gt;Second set is used to convert a guest to a customer. In this case the required parameters are: guid, password. &lt;/li&gt; &lt;ul&gt;  Security: Permitted only for customer managers, clients or trusted clients. 
     * @param {module:models/UserSignUpWsDTOModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersWithHttpInfo(body) {
      let postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postUsers");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * postUsers
     * Registers a customer. The following two sets of parameters are available: &lt;ul&gt; &lt;li&gt;First set is used to register a customer. In this case the required parameters are: login, password, firstName, lastName, titleCode.&lt;/li&gt; &lt;li&gt;Second set is used to convert a guest to a customer. In this case the required parameters are: guid, password. &lt;/li&gt; &lt;ul&gt;  Security: Permitted only for customer managers, clients or trusted clients. 
     * @param {module:models/UserSignUpWsDTOModel} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    postUsers(body) {
      return this.usersWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getUserAddresses
     * Returns customer&#39;s addresses.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AddressListWsDTOModel} and HTTP response
     */
    usersAddressesByUserIdWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserAddresses");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/addresses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getUserAddresses
     * Returns customer&#39;s addresses.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AddressListWsDTOModel}
     */
    getUserAddresses(userId, opts) {
      return this.usersAddressesByUserIdWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersAddressesByUserId
     * Creates a new address.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/AddressWsDTO296Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AddressWsDTO296Model} and HTTP response
     */
    usersAddressesByUserId1WithHttpInfo(userId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddressesByUserId1");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersAddressesByUserId1");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressWsDTO296Model;

      return this.apiClient.callApi(
        '/users/{userId}/addresses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersAddressesByUserId
     * Creates a new address.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/AddressWsDTO296Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AddressWsDTO296Model}
     */
    usersAddressesByUserId1(userId, body, opts) {
      return this.usersAddressesByUserId1WithHttpInfo(userId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersAddressesByUserIdAndAddressId
     * Returns detailed information about address with a given id.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AddressWsDTOModel} and HTTP response
     */
    usersAddressesByUserIdAndAddressIdWithHttpInfo(userId, addressId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddressesByUserIdAndAddressId");
      }

      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling usersAddressesByUserIdAndAddressId");
      }


      let pathParams = {
        'userId': userId,
        'addressId': addressId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/addresses/{addressId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersAddressesByUserIdAndAddressId
     * Returns detailed information about address with a given id.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AddressWsDTOModel}
     */
    usersAddressesByUserIdAndAddressId(userId, addressId, opts) {
      return this.usersAddressesByUserIdAndAddressIdWithHttpInfo(userId, addressId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersAddressesByUserIdAndAddressId
     * Updates the address. Attributes not provided in the request will be defined again (set to null or default).  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @param {module:models/AddressWsDTO296Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersAddressesByUserIdAndAddressId1WithHttpInfo(userId, addressId, body) {
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddressesByUserIdAndAddressId1");
      }

      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling usersAddressesByUserIdAndAddressId1");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersAddressesByUserIdAndAddressId1");
      }


      let pathParams = {
        'userId': userId,
        'addressId': addressId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/addresses/{addressId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersAddressesByUserIdAndAddressId
     * Updates the address. Attributes not provided in the request will be defined again (set to null or default).  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @param {module:models/AddressWsDTO296Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersAddressesByUserIdAndAddressId1(userId, addressId, body) {
      return this.usersAddressesByUserIdAndAddressId1WithHttpInfo(userId, addressId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersAddressesByUserIdAndAddressId
     * Updates the address. Only attributes provided in the request body will be changed.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @param {module:models/AddressWsDTO296Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersAddressesByUserIdAndAddressId2WithHttpInfo(userId, addressId, body) {
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddressesByUserIdAndAddressId2");
      }

      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling usersAddressesByUserIdAndAddressId2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersAddressesByUserIdAndAddressId2");
      }


      let pathParams = {
        'userId': userId,
        'addressId': addressId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/addresses/{addressId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersAddressesByUserIdAndAddressId
     * Updates the address. Only attributes provided in the request body will be changed.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @param {module:models/AddressWsDTO296Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersAddressesByUserIdAndAddressId2(userId, addressId, body) {
      return this.usersAddressesByUserIdAndAddressId2WithHttpInfo(userId, addressId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersAddressesByUserIdAndAddressId
     * Removes customer&#39;s address.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersAddressesByUserIdAndAddressId3WithHttpInfo(userId, addressId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddressesByUserIdAndAddressId3");
      }

      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling usersAddressesByUserIdAndAddressId3");
      }


      let pathParams = {
        'userId': userId,
        'addressId': addressId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/addresses/{addressId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersAddressesByUserIdAndAddressId
     * Removes customer&#39;s address.  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersAddressesByUserIdAndAddressId3(userId, addressId) {
      return this.usersAddressesByUserIdAndAddressId3WithHttpInfo(userId, addressId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersAddressesVerificationByUserId
     * Verifies address  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/AddressWsDTO296Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AddressWsDTO296Model} and HTTP response
     */
    usersAddressesVerificationByUserIdWithHttpInfo(userId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersAddressesVerificationByUserId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersAddressesVerificationByUserId");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressWsDTO296Model;

      return this.apiClient.callApi(
        '/users/{userId}/addresses/verification', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersAddressesVerificationByUserId
     * Verifies address  Security: Permitted for customers, guests, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/AddressWsDTO296Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AddressWsDTO296Model}
     */
    usersAddressesVerificationByUserId(userId, body, opts) {
      return this.usersAddressesVerificationByUserIdWithHttpInfo(userId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersByUserId
     * Returns customer profile.  Security: Permitted for clients, customers and customer managers 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/UserWsDTOModel} and HTTP response
     */
    usersByUserIdWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersByUserId");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersByUserId
     * Returns customer profile.  Security: Permitted for clients, customers and customer managers 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/UserWsDTOModel}
     */
    usersByUserId(userId, opts) {
      return this.usersByUserIdWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersByUserId
     * Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default).  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change profile on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/UserWsDTO286Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersByUserId1WithHttpInfo(userId, body) {
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersByUserId1");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersByUserId1");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersByUserId
     * Updates customer profile. Attributes not provided in the request body will be defined again (set to null or default).  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change profile on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/UserWsDTO286Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersByUserId1(userId, body) {
      return this.usersByUserId1WithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersByUserId
     * Updates customer profile. Only attributes provided in the request body will be changed.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change profile on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/UserWsDTO286Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersByUserId2WithHttpInfo(userId, body) {
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersByUserId2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersByUserId2");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersByUserId
     * Updates customer profile. Only attributes provided in the request body will be changed.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change profile on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/UserWsDTO286Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersByUserId2(userId, body) {
      return this.usersByUserId2WithHttpInfo(userId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersByUserId
     * Removes customer profile.  Security: Permitted for trusted clients, customers and customer managers. Trusted client is able to impersonate as any other user and deactivate profile on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersByUserId3WithHttpInfo(userId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersByUserId3");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersByUserId
     * Removes customer profile.  Security: Permitted for trusted clients, customers and customer managers. Trusted client is able to impersonate as any other user and deactivate profile on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersByUserId3(userId) {
      return this.usersByUserId3WithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsAddressesDeliveryByUserId
     * Creates an address and assigns it to the cart as the delivery address.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/AddressWsDTO296Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/AddressWsDTO296Model} and HTTP response
     */
    usersCartsAddressesDeliveryByUserIdWithHttpInfo(userId, cartId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsAddressesDeliveryByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsAddressesDeliveryByUserId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersCartsAddressesDeliveryByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AddressWsDTO296Model;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/addresses/delivery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsAddressesDeliveryByUserId
     * Creates an address and assigns it to the cart as the delivery address.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/AddressWsDTO296Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/AddressWsDTO296Model}
     */
    usersCartsAddressesDeliveryByUserId(userId, cartId, body, opts) {
      return this.usersCartsAddressesDeliveryByUserIdWithHttpInfo(userId, cartId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsAddressesDeliveryByUserId
     * Sets a delivery address for the cart. The address country must be placed among the delivery countries of the current base store.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsAddressesDeliveryByUserId1WithHttpInfo(userId, cartId, addressId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsAddressesDeliveryByUserId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsAddressesDeliveryByUserId1");
      }

      // verify the required parameter 'addressId' is set
      if (addressId === undefined || addressId === null) {
        throw new Error("Missing the required parameter 'addressId' when calling usersCartsAddressesDeliveryByUserId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'addressId': addressId
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/addresses/delivery', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsAddressesDeliveryByUserId
     * Sets a delivery address for the cart. The address country must be placed among the delivery countries of the current base store.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} addressId Address identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsAddressesDeliveryByUserId1(userId, cartId, addressId) {
      return this.usersCartsAddressesDeliveryByUserId1WithHttpInfo(userId, cartId, addressId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsAddressesDeliveryByUserId
     * Removes the delivery address from the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsAddressesDeliveryByUserId2WithHttpInfo(userId, cartId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsAddressesDeliveryByUserId2");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsAddressesDeliveryByUserId2");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/addresses/delivery', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsAddressesDeliveryByUserId
     * Removes the delivery address from the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsAddressesDeliveryByUserId2(userId, cartId) {
      return this.usersCartsAddressesDeliveryByUserId2WithHttpInfo(userId, cartId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsByUserId
     * Lists all customer carts.  Security: Permitted only for non-anonymous users. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CartListWsDTOModel} and HTTP response
     */
    usersCartsByUserIdWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsByUserId");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsByUserId
     * Lists all customer carts.  Security: Permitted only for non-anonymous users. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response).
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CartListWsDTOModel}
     */
    usersCartsByUserId(userId, opts) {
      return this.usersCartsByUserIdWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsByUserId
     * Creates a new cart or restores an anonymous cart as a user&#39;s cart (if an old Cart Id is given in the request)  Security: Cart may be created by everybody. Restoring anonymous carts is permitted only for non anonymous users. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.toMergeCartGuid User&#39;s cart GUID to merge anonymous cart to
     * @param {String} opts.oldCartId Anonymous cart GUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CartWsDTOModel} and HTTP response
     */
    usersCartsByUserId1WithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsByUserId1");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
        'toMergeCartGuid': opts['toMergeCartGuid'],
        'oldCartId': opts['oldCartId']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = CartWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsByUserId
     * Creates a new cart or restores an anonymous cart as a user&#39;s cart (if an old Cart Id is given in the request)  Security: Cart may be created by everybody. Restoring anonymous carts is permitted only for non anonymous users. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.toMergeCartGuid User&#39;s cart GUID to merge anonymous cart to
     * @param {String} opts.oldCartId Anonymous cart GUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CartWsDTOModel}
     */
    usersCartsByUserId1(userId, opts) {
      return this.usersCartsByUserId1WithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsByUserIdAndCartId
     * Returns the cart with a given identifier.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/CartWsDTOModel} and HTTP response
     */
    usersCartsByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CartWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsByUserIdAndCartId
     * Returns the cart with a given identifier.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/CartWsDTOModel}
     */
    usersCartsByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsByUserIdAndCartId
     * Deletes a cart with a given cart id.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsByUserIdAndCartId1WithHttpInfo(userId, cartId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsByUserIdAndCartId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsByUserIdAndCartId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsByUserIdAndCartId
     * Deletes a cart with a given cart id.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsByUserIdAndCartId1(userId, cartId) {
      return this.usersCartsByUserIdAndCartId1WithHttpInfo(userId, cartId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsClonesavedcartByUserId
     * Explicitly clones a cart 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.name the name that should be applied to the cloned cart
     * @param {String} opts.description the description that should be applied to the cloned cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SaveCartResultWsDTOModel} and HTTP response
     */
    usersCartsClonesavedcartByUserIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsClonesavedcartByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsClonesavedcartByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
        'name': opts['name'],
        'description': opts['description']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SaveCartResultWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/clonesavedcart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsClonesavedcartByUserId
     * Explicitly clones a cart 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.name the name that should be applied to the cloned cart
     * @param {String} opts.description the description that should be applied to the cloned cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SaveCartResultWsDTOModel}
     */
    usersCartsClonesavedcartByUserId(userId, cartId, opts) {
      return this.usersCartsClonesavedcartByUserIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsDeliverymodeByUserIdAndCartId
     * Returns the delivery mode selected for the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DeliveryModeWsDTOModel} and HTTP response
     */
    usersCartsDeliverymodeByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsDeliverymodeByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsDeliverymodeByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeliveryModeWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/deliverymode', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsDeliverymodeByUserIdAndCartId
     * Returns the delivery mode selected for the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DeliveryModeWsDTOModel}
     */
    usersCartsDeliverymodeByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsDeliverymodeByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsDeliverymodeByUserIdAndCartId
     * Sets the delivery mode with a given identifier for the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} deliveryModeId Delivery mode identifier (code)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsDeliverymodeByUserIdAndCartId1WithHttpInfo(userId, cartId, deliveryModeId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsDeliverymodeByUserIdAndCartId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsDeliverymodeByUserIdAndCartId1");
      }

      // verify the required parameter 'deliveryModeId' is set
      if (deliveryModeId === undefined || deliveryModeId === null) {
        throw new Error("Missing the required parameter 'deliveryModeId' when calling usersCartsDeliverymodeByUserIdAndCartId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'deliveryModeId': deliveryModeId
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/deliverymode', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsDeliverymodeByUserIdAndCartId
     * Sets the delivery mode with a given identifier for the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} deliveryModeId Delivery mode identifier (code)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsDeliverymodeByUserIdAndCartId1(userId, cartId, deliveryModeId) {
      return this.usersCartsDeliverymodeByUserIdAndCartId1WithHttpInfo(userId, cartId, deliveryModeId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsDeliverymodeByUserIdAndCartId
     * Removes the delivery mode from the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsDeliverymodeByUserIdAndCartId2WithHttpInfo(userId, cartId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsDeliverymodeByUserIdAndCartId2");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsDeliverymodeByUserIdAndCartId2");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/deliverymode', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsDeliverymodeByUserIdAndCartId
     * Removes the delivery mode from the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsDeliverymodeByUserIdAndCartId2(userId, cartId) {
      return this.usersCartsDeliverymodeByUserIdAndCartId2WithHttpInfo(userId, cartId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsDeliverymodesByUserIdAndCartId
     * Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/DeliveryModeListWsDTOModel} and HTTP response
     */
    usersCartsDeliverymodesByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsDeliverymodesByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsDeliverymodesByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeliveryModeListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/deliverymodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsDeliverymodesByUserIdAndCartId
     * Returns all delivery modes supported for the current base store and cart delivery address. A delivery address must be set for the cart, otherwise an empty list will be returned.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/DeliveryModeListWsDTOModel}
     */
    usersCartsDeliverymodesByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsDeliverymodesByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEmailByUserIdAndCartId
     * Assigns an email to the cart. This step is required to make a guest checkout.  Security: Permitted only for client or trusted client 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email of the guest user. It will be used during checkout process
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsEmailByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEmailByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEmailByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'email': opts['email']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEmailByUserIdAndCartId
     * Assigns an email to the cart. This step is required to make a guest checkout.  Security: Permitted only for client or trusted client 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email of the guest user. It will be used during checkout process
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsEmailByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsEmailByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEntriesByUserIdAndCartId
     * Returns cart entries.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderEntryListWsDTOModel} and HTTP response
     */
    usersCartsEntriesByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEntriesByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEntriesByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderEntryListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/entries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEntriesByUserIdAndCartId
     * Returns cart entries.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderEntryListWsDTOModel}
     */
    usersCartsEntriesByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsEntriesByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEntriesByUserIdAndCartId
     * Adds a product to the cart.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/OrderEntryWsDTO542Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderEntryWsDTO542Model} and HTTP response
     */
    usersCartsEntriesByUserIdAndCartId1WithHttpInfo(userId, cartId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEntriesByUserIdAndCartId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEntriesByUserIdAndCartId1");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersCartsEntriesByUserIdAndCartId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderEntryWsDTO542Model;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/entries', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEntriesByUserIdAndCartId
     * Adds a product to the cart.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/OrderEntryWsDTO542Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderEntryWsDTO542Model}
     */
    usersCartsEntriesByUserIdAndCartId1(userId, cartId, body, opts) {
      return this.usersCartsEntriesByUserIdAndCartId1WithHttpInfo(userId, cartId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Returns the details of the cart entries.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderEntryWsDTOModel} and HTTP response
     */
    usersCartsEntriesEntryNumberByUserIdWithHttpInfo(userId, cartId, entryNumber, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEntriesEntryNumberByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEntriesEntryNumberByUserId");
      }

      // verify the required parameter 'entryNumber' is set
      if (entryNumber === undefined || entryNumber === null) {
        throw new Error("Missing the required parameter 'entryNumber' when calling usersCartsEntriesEntryNumberByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'entryNumber': entryNumber
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderEntryWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/entries/{entryNumber}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Returns the details of the cart entries.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderEntryWsDTOModel}
     */
    usersCartsEntriesEntryNumberByUserId(userId, cartId, entryNumber, opts) {
      return this.usersCartsEntriesEntryNumberByUserIdWithHttpInfo(userId, cartId, entryNumber, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Updates the quantity of a single cart entry and details of the store where the cart entry will be picked. Attributes not provided in request will be defined again (set to null or default)  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @param {module:models/OrderEntryWsDTO542Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderEntryWsDTO542Model} and HTTP response
     */
    usersCartsEntriesEntryNumberByUserId1WithHttpInfo(userId, cartId, entryNumber, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEntriesEntryNumberByUserId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEntriesEntryNumberByUserId1");
      }

      // verify the required parameter 'entryNumber' is set
      if (entryNumber === undefined || entryNumber === null) {
        throw new Error("Missing the required parameter 'entryNumber' when calling usersCartsEntriesEntryNumberByUserId1");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersCartsEntriesEntryNumberByUserId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'entryNumber': entryNumber
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderEntryWsDTO542Model;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/entries/{entryNumber}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Updates the quantity of a single cart entry and details of the store where the cart entry will be picked. Attributes not provided in request will be defined again (set to null or default)  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @param {module:models/OrderEntryWsDTO542Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderEntryWsDTO542Model}
     */
    usersCartsEntriesEntryNumberByUserId1(userId, cartId, entryNumber, body, opts) {
      return this.usersCartsEntriesEntryNumberByUserId1WithHttpInfo(userId, cartId, entryNumber, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Updates the quantity of a single cart entry and details of the store where the cart entry will be picked.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @param {module:models/OrderEntryWsDTO542Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderEntryWsDTO542Model} and HTTP response
     */
    usersCartsEntriesEntryNumberByUserId2WithHttpInfo(userId, cartId, entryNumber, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEntriesEntryNumberByUserId2");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEntriesEntryNumberByUserId2");
      }

      // verify the required parameter 'entryNumber' is set
      if (entryNumber === undefined || entryNumber === null) {
        throw new Error("Missing the required parameter 'entryNumber' when calling usersCartsEntriesEntryNumberByUserId2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersCartsEntriesEntryNumberByUserId2");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'entryNumber': entryNumber
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderEntryWsDTO542Model;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/entries/{entryNumber}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Updates the quantity of a single cart entry and details of the store where the cart entry will be picked.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @param {module:models/OrderEntryWsDTO542Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderEntryWsDTO542Model}
     */
    usersCartsEntriesEntryNumberByUserId2(userId, cartId, entryNumber, body, opts) {
      return this.usersCartsEntriesEntryNumberByUserId2WithHttpInfo(userId, cartId, entryNumber, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Deletes cart entry.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsEntriesEntryNumberByUserId3WithHttpInfo(userId, cartId, entryNumber) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsEntriesEntryNumberByUserId3");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsEntriesEntryNumberByUserId3");
      }

      // verify the required parameter 'entryNumber' is set
      if (entryNumber === undefined || entryNumber === null) {
        throw new Error("Missing the required parameter 'entryNumber' when calling usersCartsEntriesEntryNumberByUserId3");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'entryNumber': entryNumber
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/entries/{entryNumber}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsEntriesEntryNumberByUserId
     * Deletes cart entry.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} entryNumber Entry number. Zero-based numbering.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsEntriesEntryNumberByUserId3(userId, cartId, entryNumber) {
      return this.usersCartsEntriesEntryNumberByUserId3WithHttpInfo(userId, cartId, entryNumber)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsFlagForDeletionByUserId
     * Flags a cart for deletion (the cart doesn&#39;t have corresponding save cart attributes anymore). The cart is not actually deleted from the database. But with the removal of the saved cart attributes, this cart will be taken care of by the cart removal job just like any other cart. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SaveCartResultWsDTOModel} and HTTP response
     */
    usersCartsFlagForDeletionByUserIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsFlagForDeletionByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsFlagForDeletionByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaveCartResultWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/flagForDeletion', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsFlagForDeletionByUserId
     * Flags a cart for deletion (the cart doesn&#39;t have corresponding save cart attributes anymore). The cart is not actually deleted from the database. But with the removal of the saved cart attributes, this cart will be taken care of by the cart removal job just like any other cart. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SaveCartResultWsDTOModel}
     */
    usersCartsFlagForDeletionByUserId(userId, cartId, opts) {
      return this.usersCartsFlagForDeletionByUserIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsPaymentdetailsByUserId
     * Defines details of a new credit card payment details and assigns the payment to the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/PaymentDetailsWsDTO640Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PaymentDetailsWsDTO640Model} and HTTP response
     */
    usersCartsPaymentdetailsByUserIdWithHttpInfo(userId, cartId, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsPaymentdetailsByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsPaymentdetailsByUserId");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersCartsPaymentdetailsByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentDetailsWsDTO640Model;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/paymentdetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsPaymentdetailsByUserId
     * Defines details of a new credit card payment details and assigns the payment to the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {module:models/PaymentDetailsWsDTO640Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PaymentDetailsWsDTO640Model}
     */
    usersCartsPaymentdetailsByUserId(userId, cartId, body, opts) {
      return this.usersCartsPaymentdetailsByUserIdWithHttpInfo(userId, cartId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsPaymentdetailsByUserId
     * Sets credit card payment details for the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId Payment details identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsPaymentdetailsByUserId1WithHttpInfo(userId, cartId, paymentDetailsId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsPaymentdetailsByUserId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsPaymentdetailsByUserId1");
      }

      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling usersCartsPaymentdetailsByUserId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'paymentDetailsId': paymentDetailsId
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/paymentdetails', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsPaymentdetailsByUserId
     * Sets credit card payment details for the cart.  Security: Permitted only for customers, guests, customer managers or trusted clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId Payment details identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsPaymentdetailsByUserId1(userId, cartId, paymentDetailsId) {
      return this.usersCartsPaymentdetailsByUserId1WithHttpInfo(userId, cartId, paymentDetailsId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsPromotionsByUserIdAndCartId
     * Return information about promotions applied on cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PromotionResultListWsDTOModel} and HTTP response
     */
    usersCartsPromotionsByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsPromotionsByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsPromotionsByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PromotionResultListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/promotions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsPromotionsByUserIdAndCartId
     * Return information about promotions applied on cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PromotionResultListWsDTOModel}
     */
    usersCartsPromotionsByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsPromotionsByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsPromotionsByUserIdAndCartId
     * Enables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} promotionId Promotion identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsPromotionsByUserIdAndCartId1WithHttpInfo(userId, cartId, promotionId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsPromotionsByUserIdAndCartId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsPromotionsByUserIdAndCartId1");
      }

      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling usersCartsPromotionsByUserIdAndCartId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'promotionId': promotionId
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/promotions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsPromotionsByUserIdAndCartId
     * Enables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Anonymous user may access cart by its guid. Customer may access only own cart by its id. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} promotionId Promotion identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsPromotionsByUserIdAndCartId1(userId, cartId, promotionId) {
      return this.usersCartsPromotionsByUserIdAndCartId1WithHttpInfo(userId, cartId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsPromotionsPromotionIdByUserId
     * Return information about promotion with given id, applied on cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} promotionId Promotion identifier (code)
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PromotionResultListWsDTOModel} and HTTP response
     */
    usersCartsPromotionsPromotionIdByUserIdWithHttpInfo(userId, cartId, promotionId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsPromotionsPromotionIdByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsPromotionsPromotionIdByUserId");
      }

      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling usersCartsPromotionsPromotionIdByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'promotionId': promotionId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PromotionResultListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/promotions/{promotionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsPromotionsPromotionIdByUserId
     * Return information about promotion with given id, applied on cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} promotionId Promotion identifier (code)
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PromotionResultListWsDTOModel}
     */
    usersCartsPromotionsPromotionIdByUserId(userId, cartId, promotionId, opts) {
      return this.usersCartsPromotionsPromotionIdByUserIdWithHttpInfo(userId, cartId, promotionId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsPromotionsPromotionIdByUserId
     * Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Permitted only for trusted clients 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} promotionId Promotion identifier (code)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsPromotionsPromotionIdByUserId1WithHttpInfo(userId, cartId, promotionId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsPromotionsPromotionIdByUserId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsPromotionsPromotionIdByUserId1");
      }

      // verify the required parameter 'promotionId' is set
      if (promotionId === undefined || promotionId === null) {
        throw new Error("Missing the required parameter 'promotionId' when calling usersCartsPromotionsPromotionIdByUserId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'promotionId': promotionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/promotions/{promotionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsPromotionsPromotionIdByUserId
     * Disables the promotion for the order based on the promotionId defined for the cart. Requests pertaining to promotions have been developed for the previous version of promotions and vouchers and therefore some of them are currently not compatible with the new promotion engine.  Security: Permitted only for trusted clients 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} promotionId Promotion identifier (code)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsPromotionsPromotionIdByUserId1(userId, cartId, promotionId) {
      return this.usersCartsPromotionsPromotionIdByUserId1WithHttpInfo(userId, cartId, promotionId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsRestoresavedcartByUserId
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SaveCartResultWsDTOModel} and HTTP response
     */
    usersCartsRestoresavedcartByUserIdWithHttpInfo(userId, cartId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsRestoresavedcartByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsRestoresavedcartByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaveCartResultWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/restoresavedcart', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsRestoresavedcartByUserId
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SaveCartResultWsDTOModel}
     */
    usersCartsRestoresavedcartByUserId(userId, cartId) {
      return this.usersCartsRestoresavedcartByUserIdWithHttpInfo(userId, cartId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsSaveByUserIdAndCartId
     * Explicitly saves a cart 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.saveCartName the name that should be applied to the saved cart
     * @param {String} opts.saveCartDescription the description that should be applied to the saved cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SaveCartResultWsDTOModel} and HTTP response
     */
    usersCartsSaveByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsSaveByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsSaveByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
        'saveCartName': opts['saveCartName'],
        'saveCartDescription': opts['saveCartDescription']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = SaveCartResultWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/save', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsSaveByUserIdAndCartId
     * Explicitly saves a cart 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.saveCartName the name that should be applied to the saved cart
     * @param {String} opts.saveCartDescription the description that should be applied to the saved cart
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SaveCartResultWsDTOModel}
     */
    usersCartsSaveByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsSaveByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsSavedcartByUserIdAndCartId
     * Returns saved cart by it id for authenticated user 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SaveCartResultWsDTOModel} and HTTP response
     */
    usersCartsSavedcartByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsSavedcartByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsSavedcartByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SaveCartResultWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/savedcart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsSavedcartByUserIdAndCartId
     * Returns saved cart by it id for authenticated user 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SaveCartResultWsDTOModel}
     */
    usersCartsSavedcartByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsSavedcartByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsVouchersByUserIdAndCartId
     * Returns list of vouchers applied to the cart.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/VoucherListWsDTOModel} and HTTP response
     */
    usersCartsVouchersByUserIdAndCartIdWithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsVouchersByUserIdAndCartId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsVouchersByUserIdAndCartId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VoucherListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/vouchers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsVouchersByUserIdAndCartId
     * Returns list of vouchers applied to the cart.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/VoucherListWsDTOModel}
     */
    usersCartsVouchersByUserIdAndCartId(userId, cartId, opts) {
      return this.usersCartsVouchersByUserIdAndCartIdWithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsVouchersByUserIdAndCartId
     * Applies a voucher based on the voucherId defined for the cart.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} voucherId Voucher identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsVouchersByUserIdAndCartId1WithHttpInfo(userId, cartId, voucherId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsVouchersByUserIdAndCartId1");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsVouchersByUserIdAndCartId1");
      }

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling usersCartsVouchersByUserIdAndCartId1");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'voucherId': voucherId
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/vouchers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsVouchersByUserIdAndCartId
     * Applies a voucher based on the voucherId defined for the cart.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} voucherId Voucher identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsVouchersByUserIdAndCartId1(userId, cartId, voucherId) {
      return this.usersCartsVouchersByUserIdAndCartId1WithHttpInfo(userId, cartId, voucherId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCartsVouchersVoucherIdByUserId
     * Removes a voucher based on the voucherId defined for the current cart.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} voucherId Voucher identifier (code)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersCartsVouchersVoucherIdByUserIdWithHttpInfo(userId, cartId, voucherId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCartsVouchersVoucherIdByUserId");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersCartsVouchersVoucherIdByUserId");
      }

      // verify the required parameter 'voucherId' is set
      if (voucherId === undefined || voucherId === null) {
        throw new Error("Missing the required parameter 'voucherId' when calling usersCartsVouchersVoucherIdByUserId");
      }


      let pathParams = {
        'userId': userId,
        'cartId': cartId,
        'voucherId': voucherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/carts/{cartId}/vouchers/{voucherId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCartsVouchersVoucherIdByUserId
     * Removes a voucher based on the voucherId defined for the current cart.  Security: Permitted only for non anonymous users or clients. Trusted client or customer manager may impersonate as any user and access cart on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart identifier &lt;ul&gt; &lt;li&gt;cart code for logged in user&lt;/li&gt; &lt;li&gt;cart guid for anonymous user&lt;/li&gt; &lt;li&gt;&#39;current&#39; for the last modified cart&lt;/li&gt; &lt;/ul&gt;
     * @param {String} voucherId Voucher identifier (code)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersCartsVouchersVoucherIdByUserId(userId, cartId, voucherId) {
      return this.usersCartsVouchersVoucherIdByUserIdWithHttpInfo(userId, cartId, voucherId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersCustomergroupsByUserId
     * Returns all customer groups of a customer.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/UserGroupListWsDTOModel} and HTTP response
     */
    usersCustomergroupsByUserIdWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersCustomergroupsByUserId");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UserGroupListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/customergroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersCustomergroupsByUserId
     * Returns all customer groups of a customer.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/UserGroupListWsDTOModel}
     */
    usersCustomergroupsByUserId(userId, opts) {
      return this.usersCustomergroupsByUserIdWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersLoginByUserId
     * Changes customer&#39;s login.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change login on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.password Customer&#39;s current password.
     * @param {String} opts.newLogin Customer&#39;s new login. Customer login is case insensitive.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersLoginByUserIdWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersLoginByUserId");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'password': opts['password'],
        'newLogin': opts['newLogin']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/login', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersLoginByUserId
     * Changes customer&#39;s login.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager is able to impersonate as any other user and change login on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.password Customer&#39;s current password.
     * @param {String} opts.newLogin Customer&#39;s new login. Customer login is case insensitive.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersLoginByUserId(userId, opts) {
      return this.usersLoginByUserIdWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersOrdersByUserId
     * Returns order history data for all orders placed by the specific user for the specific base store. Response contains orders search result displayed in several pages if needed.  Security: Allowed only for customers, customer managers, trusted clients Trusted client is able to impersonate as any customer and access their orders. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.statuses Filters only certain order statuses. It means: statuses&#x3D;CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.sort Sorting method applied to the return results.
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderHistoryListWsDTOModel} and HTTP response
     */
    usersOrdersByUserId1WithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersOrdersByUserId1");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'statuses': opts['statuses'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort'],
        'currentPage': opts['currentPage'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderHistoryListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersOrdersByUserId
     * Returns order history data for all orders placed by the specific user for the specific base store. Response contains orders search result displayed in several pages if needed.  Security: Allowed only for customers, customer managers, trusted clients Trusted client is able to impersonate as any customer and access their orders. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.statuses Filters only certain order statuses. It means: statuses&#x3D;CANCELLED,CHECKED_VALID would only return orders with status CANCELLED or CHECKED_VALID.
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.sort Sorting method applied to the return results.
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderHistoryListWsDTOModel}
     */
    usersOrdersByUserId1(userId, opts) {
      return this.usersOrdersByUserId1WithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersOrdersByUserId
     * Authorizes cart and places the order. Response contains the new order data.  Security: Allowed only for customers, customer managers, clients or trusted clients. Trusted client is able to impersonate as any customer and place order on his behalf 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart code for logged in user, cart GUID for guest checkout
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.securityCode CCV security code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderWsDTOModel} and HTTP response
     */
    usersOrdersByUserId2WithHttpInfo(userId, cartId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersOrdersByUserId2");
      }

      // verify the required parameter 'cartId' is set
      if (cartId === undefined || cartId === null) {
        throw new Error("Missing the required parameter 'cartId' when calling usersOrdersByUserId2");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
        'cartId': cartId,
        'securityCode': opts['securityCode']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OrderWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersOrdersByUserId
     * Authorizes cart and places the order. Response contains the new order data.  Security: Allowed only for customers, customer managers, clients or trusted clients. Trusted client is able to impersonate as any customer and place order on his behalf 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} cartId Cart code for logged in user, cart GUID for guest checkout
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.securityCode CCV security code.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderWsDTOModel}
     */
    usersOrdersByUserId2(userId, cartId, opts) {
      return this.usersOrdersByUserId2WithHttpInfo(userId, cartId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersOrdersByUserIdAndCode
     * Returns specific order details based on a specific order code. The response contains detailed order information.  Security: Allowed only for customers, customer managers, clients or trusted clients. Trusted client is able to impersonate as any customer and access their orders. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} code Order GUID (Globally Unique Identifier) or order CODE
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/OrderWsDTOModel} and HTTP response
     */
    usersOrdersByUserIdAndCodeWithHttpInfo(userId, code, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersOrdersByUserIdAndCode");
      }

      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling usersOrdersByUserIdAndCode");
      }


      let pathParams = {
        'userId': userId,
        'code': code
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OrderWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/orders/{code}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersOrdersByUserIdAndCode
     * Returns specific order details based on a specific order code. The response contains detailed order information.  Security: Allowed only for customers, customer managers, clients or trusted clients. Trusted client is able to impersonate as any customer and access their orders. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} code Order GUID (Globally Unique Identifier) or order CODE
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/OrderWsDTOModel}
     */
    usersOrdersByUserIdAndCode(userId, code, opts) {
      return this.usersOrdersByUserIdAndCodeWithHttpInfo(userId, code, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersPasswordByUserId
     * Changes customer&#39;s password.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager may change someone&#39;s else password without knowing the old one. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts._new New password
     * @param {String} opts.old Old password. Required only for ROLE_CUSTOMERGROUP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersPasswordByUserIdWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPasswordByUserId");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'new': opts['_new'],
        'old': opts['old']
      };

      let authNames = ['auth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersPasswordByUserId
     * Changes customer&#39;s password.  Security: Permitted for trusted clients, customers and customer managers. Trusted client or customer manager may change someone&#39;s else password without knowing the old one. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts._new New password
     * @param {String} opts.old Old password. Required only for ROLE_CUSTOMERGROUP
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersPasswordByUserId(userId, opts) {
      return this.usersPasswordByUserIdWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersPaymentdetailsByUserId
     * Returns customer&#39;s credit card payment details for a given id.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PaymentDetailsWsDTOModel} and HTTP response
     */
    usersPaymentdetailsByUserIdWithHttpInfo(userId, paymentDetailsId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPaymentdetailsByUserId");
      }

      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling usersPaymentdetailsByUserId");
      }


      let pathParams = {
        'userId': userId,
        'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentDetailsWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/paymentdetails/{paymentDetailsId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersPaymentdetailsByUserId
     * Returns customer&#39;s credit card payment details for a given id.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PaymentDetailsWsDTOModel}
     */
    usersPaymentdetailsByUserId(userId, paymentDetailsId, opts) {
      return this.usersPaymentdetailsByUserIdWithHttpInfo(userId, paymentDetailsId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersPaymentdetailsByUserId
     * Updates existing customer&#39;s credit card payment info based on the payment info ID. Attributes not given in request will be defined again (set to null or default).  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @param {module:models/PaymentDetailsWsDTO640Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersPaymentdetailsByUserId1WithHttpInfo(userId, paymentDetailsId, body) {
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPaymentdetailsByUserId1");
      }

      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling usersPaymentdetailsByUserId1");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPaymentdetailsByUserId1");
      }


      let pathParams = {
        'userId': userId,
        'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/paymentdetails/{paymentDetailsId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersPaymentdetailsByUserId
     * Updates existing customer&#39;s credit card payment info based on the payment info ID. Attributes not given in request will be defined again (set to null or default).  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @param {module:models/PaymentDetailsWsDTO640Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersPaymentdetailsByUserId1(userId, paymentDetailsId, body) {
      return this.usersPaymentdetailsByUserId1WithHttpInfo(userId, paymentDetailsId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersPaymentdetailsByUserId
     * Updates existing customer&#39;s credit card payment details based on its ID. Only attributes given in request will be changed.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @param {module:models/PaymentDetailsWsDTO640Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersPaymentdetailsByUserId2WithHttpInfo(userId, paymentDetailsId, body) {
      let postBody = body;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPaymentdetailsByUserId2");
      }

      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling usersPaymentdetailsByUserId2");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling usersPaymentdetailsByUserId2");
      }


      let pathParams = {
        'userId': userId,
        'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/paymentdetails/{paymentDetailsId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersPaymentdetailsByUserId
     * Updates existing customer&#39;s credit card payment details based on its ID. Only attributes given in request will be changed.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @param {module:models/PaymentDetailsWsDTO640Model} body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersPaymentdetailsByUserId2(userId, paymentDetailsId, body) {
      return this.usersPaymentdetailsByUserId2WithHttpInfo(userId, paymentDetailsId, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersPaymentdetailsByUserId
     * Removes customer&#39;s credit card payment details based on its ID.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    usersPaymentdetailsByUserId3WithHttpInfo(userId, paymentDetailsId) {
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPaymentdetailsByUserId3");
      }

      // verify the required parameter 'paymentDetailsId' is set
      if (paymentDetailsId === undefined || paymentDetailsId === null) {
        throw new Error("Missing the required parameter 'paymentDetailsId' when calling usersPaymentdetailsByUserId3");
      }


      let pathParams = {
        'userId': userId,
        'paymentDetailsId': paymentDetailsId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/users/{userId}/paymentdetails/{paymentDetailsId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersPaymentdetailsByUserId
     * Removes customer&#39;s credit card payment details based on its ID.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {String} paymentDetailsId - Payment details identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    usersPaymentdetailsByUserId3(userId, paymentDetailsId) {
      return this.usersPaymentdetailsByUserId3WithHttpInfo(userId, paymentDetailsId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UsersPaymentdetailsByUserId
     * Return customer&#39;s credit card payment details list.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.saved Type of payment details
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/PaymentDetailsListWsDTOModel} and HTTP response
     */
    usersPaymentdetailsByUserId4WithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling usersPaymentdetailsByUserId4");
      }


      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'saved': opts['saved'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentDetailsListWsDTOModel;

      return this.apiClient.callApi(
        '/users/{userId}/paymentdetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * UsersPaymentdetailsByUserId
     * Return customer&#39;s credit card payment details list.  Security: Permitted for customers, customer managers or trusted client. Trusted client or customer manager is able to impersonate as any other user and access data on their behalf. 
     * @param {String} userId User identifier or one of the literals below : &lt;ul&gt; &lt;li&gt;&#39;current&#39; for currently authenticated user&lt;/li&gt; &lt;li&gt;&#39;anonymous&#39; for anonymous user&lt;/li&gt; &lt;/ul&gt;
     * @param {Object} opts Optional parameters
     * @param {String} opts.saved Type of payment details
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in the response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/PaymentDetailsListWsDTOModel}
     */
    usersPaymentdetailsByUserId4(userId, opts) {
      return this.usersPaymentdetailsByUserId4WithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
