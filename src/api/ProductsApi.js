/**
 * OCC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductExpressUpdateElementListWsDTOModel from '../models/ProductExpressUpdateElementListWsDTOModel';
import ProductReferenceListWsDTOModel from '../models/ProductReferenceListWsDTOModel';
import ProductSearchPageWsDTOModel from '../models/ProductSearchPageWsDTOModel';
import ProductWsDTOModel from '../models/ProductWsDTOModel';
import ReviewListWsDTOModel from '../models/ReviewListWsDTOModel';
import ReviewWsDTO208Model from '../models/ReviewWsDTO208Model';
import StockWsDTOModel from '../models/StockWsDTOModel';
import StoreFinderStockSearchPageWsDTOModel from '../models/StoreFinderStockSearchPageWsDTOModel';
import SuggestionListWsDTOModel from '../models/SuggestionListWsDTOModel';

/**
* Products service.
* @module api/ProductsApi
* @version v2
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} apiClient Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * getProduct
     * Returns details of a single product according to a product code. 
     * @param {String} productCode Product identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductWsDTOModel} and HTTP response
     */
    productsByProductCodeWithHttpInfo(productCode, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling getProduct");
      }


      let pathParams = {
        'productCode': productCode
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductWsDTOModel;

      return this.apiClient.callApi(
        '/products/{productCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getProduct
     * Returns details of a single product according to a product code. 
     * @param {String} productCode Product identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductWsDTOModel}
     */
    getProduct(productCode, opts) {
      return this.productsByProductCodeWithHttpInfo(productCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getProductExpressupdate
     * Returns products added to the express update feed. Returns only elements updated after the provided timestamp.The queue is cleared using a defined cronjob.  Security: Permitted only for trusted client 
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalog Only products from this catalog are returned. Format: &lt;b&gt;catalogId:catalogVersion&lt;/b&gt;
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.timestamp Only items newer than the given parameter are retrieved from the queue. This parameter should be in RFC-8601 format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductExpressUpdateElementListWsDTOModel} and HTTP response
     */
    productsExpressupdateWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'catalog': opts['catalog'],
        'fields': opts['fields'],
        'timestamp': opts['timestamp']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductExpressUpdateElementListWsDTOModel;

      return this.apiClient.callApi(
        '/products/expressupdate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getProductExpressupdate
     * Returns products added to the express update feed. Returns only elements updated after the provided timestamp.The queue is cleared using a defined cronjob.  Security: Permitted only for trusted client 
     * @param {Object} opts Optional parameters
     * @param {String} opts.catalog Only products from this catalog are returned. Format: &lt;b&gt;catalogId:catalogVersion&lt;/b&gt;
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.timestamp Only items newer than the given parameter are retrieved from the queue. This parameter should be in RFC-8601 format.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductExpressUpdateElementListWsDTOModel}
     */
    getProductExpressupdate(opts) {
      return this.productsExpressupdateWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getProductReferences
     * Returns references for a product with a given product code. Reference type specifies which references to return.  Security: Permitted only for trusted client 
     * @param {String} productCode Product identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageSize Maximum size of returned results.
     * @param {String} opts.referenceType Reference type according to enum ProductReferenceTypeEnum
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductReferenceListWsDTOModel} and HTTP response
     */
    productsReferencesByProductCodeWithHttpInfo(productCode, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling getProductReferences");
      }


      let pathParams = {
        'productCode': productCode
      };
      let queryParams = {
        'pageSize': opts['pageSize'],
        'referenceType': opts['referenceType'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductReferenceListWsDTOModel;

      return this.apiClient.callApi(
        '/products/{productCode}/references', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getProductReferences
     * Returns references for a product with a given product code. Reference type specifies which references to return.  Security: Permitted only for trusted client 
     * @param {String} productCode Product identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.pageSize Maximum size of returned results.
     * @param {String} opts.referenceType Reference type according to enum ProductReferenceTypeEnum
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductReferenceListWsDTOModel}
     */
    getProductReferences(productCode, opts) {
      return this.productsReferencesByProductCodeWithHttpInfo(productCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getProductReviews
     * Returns the reviews for a product with a given product code. 
     * @param {String} productCode Product identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReviewListWsDTOModel} and HTTP response
     */
    productsReviewsByProductCodeWithHttpInfo(productCode) {
      let postBody = null;

      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling getProductReviews");
      }


      let pathParams = {
        'productCode': productCode
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReviewListWsDTOModel;

      return this.apiClient.callApi(
        '/products/{productCode}/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getProductReviews
     * Returns the reviews for a product with a given product code. 
     * @param {String} productCode Product identifier
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReviewListWsDTOModel}
     */
    getProductReviews(productCode) {
      return this.productsReviewsByProductCodeWithHttpInfo(productCode)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * postProductReview
     * Creates a new customer review as an anonymous user. 
     * @param {String} productCode Product identifier
     * @param {module:models/ReviewWsDTO208Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ReviewWsDTO208Model} and HTTP response
     */
    productsReviewsByProductCode1WithHttpInfo(productCode, body, opts) {
      opts = opts || {};
      let postBody = body;

      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling postProductReview");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling postProductReview");
      }


      let pathParams = {
        'productCode': productCode
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ReviewWsDTO208Model;

      return this.apiClient.callApi(
        '/products/{productCode}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * postProductReview
     * Creates a new customer review as an anonymous user. 
     * @param {String} productCode Product identifier
     * @param {module:models/ReviewWsDTO208Model} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ReviewWsDTO208Model}
     */
    postProductReview(productCode, body, opts) {
      return this.productsReviewsByProductCode1WithHttpInfo(productCode, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ProductsSearch
     * Returns a list of products and additional data such as: available facets, available sorting and pagination options. It can include spelling suggestions.To make spelling suggestions work you need to: &lt;ul&gt; &lt;li&gt;Make sure enableSpellCheck on the SearchQuery is set to true. By default it should be already set to true. &lt;/li&gt; &lt;li&gt;Have indexed properties configured to be used for spellchecking.&lt;/li&gt; &lt;/ul&gt; 
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Serialized query, free text search, facets.&lt;br&gt; The format of a serialized query: &lt;b&gt;freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2&lt;/b&gt;
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.sort Sorting method applied to the display search results.
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/ProductSearchPageWsDTOModel} and HTTP response
     */
    productsSearch1WithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'pageSize': opts['pageSize'],
        'sort': opts['sort'],
        'currentPage': opts['currentPage'],
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProductSearchPageWsDTOModel;

      return this.apiClient.callApi(
        '/products/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ProductsSearch
     * Returns a list of products and additional data such as: available facets, available sorting and pagination options. It can include spelling suggestions.To make spelling suggestions work you need to: &lt;ul&gt; &lt;li&gt;Make sure enableSpellCheck on the SearchQuery is set to true. By default it should be already set to true. &lt;/li&gt; &lt;li&gt;Have indexed properties configured to be used for spellchecking.&lt;/li&gt; &lt;/ul&gt; 
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Serialized query, free text search, facets.&lt;br&gt; The format of a serialized query: &lt;b&gt;freeTextSearch:sort:facetKey1:facetValue1:facetKey2:facetValue2&lt;/b&gt;
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.sort Sorting method applied to the display search results.
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/ProductSearchPageWsDTOModel}
     */
    getProductSearch(opts) {
      return this.productsSearch1WithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * ProductsStockByProductCode
     * Returns product&#39;s stock levels sorted by distance from specific location passed by free-text parameter or longitude and latitude parameters. The following two sets of parameters are available: &lt;ul&gt; &lt;li&gt;location (required), currentPage (optional), pageSize (optional) or&lt;/li&gt;&gt; &lt;li&gt;longitude (required), latitude (required), currentPage (optional), pageSize(optional).&lt;/li&gt; &lt;/ul&gt; 
     * @param {String} productCode Product identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.latitude Longitude location parameter.
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.location Free-text location
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.longitude Latitude location parameter.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/StoreFinderStockSearchPageWsDTOModel} and HTTP response
     */
    productsStockByProductCode1WithHttpInfo(productCode, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling getProductStock");
      }


      let pathParams = {
        'productCode': productCode
      };
      let queryParams = {
        'latitude': opts['latitude'],
        'pageSize': opts['pageSize'],
        'location': opts['location'],
        'currentPage': opts['currentPage'],
        'fields': opts['fields'],
        'longitude': opts['longitude']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StoreFinderStockSearchPageWsDTOModel;

      return this.apiClient.callApi(
        '/products/{productCode}/stock', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * ProductsStockByProductCode
     * Returns product&#39;s stock levels sorted by distance from specific location passed by free-text parameter or longitude and latitude parameters. The following two sets of parameters are available: &lt;ul&gt; &lt;li&gt;location (required), currentPage (optional), pageSize (optional) or&lt;/li&gt;&gt; &lt;li&gt;longitude (required), latitude (required), currentPage (optional), pageSize(optional).&lt;/li&gt; &lt;/ul&gt; 
     * @param {String} productCode Product identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.latitude Longitude location parameter.
     * @param {String} opts.pageSize The number of results returned per page.
     * @param {String} opts.location Free-text location
     * @param {String} opts.currentPage The current result page requested.
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @param {String} opts.longitude Latitude location parameter.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/StoreFinderStockSearchPageWsDTOModel}
     */
    getProductStock(productCode, opts) {
      return this.productsStockByProductCode1WithHttpInfo(productCode, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getProductsStockByProductCodeAndStoreName
     * Returns product&#39;s stock level for a particular store (POS). 
     * @param {String} productCode Product identifier
     * @param {String} storeName Store identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/StockWsDTOModel} and HTTP response
     */
    productsStockByProductCodeAndStoreNameWithHttpInfo(productCode, storeName, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'productCode' is set
      if (productCode === undefined || productCode === null) {
        throw new Error("Missing the required parameter 'productCode' when calling getProductsStockByProductCodeAndStoreName");
      }

      // verify the required parameter 'storeName' is set
      if (storeName === undefined || storeName === null) {
        throw new Error("Missing the required parameter 'storeName' when calling getProductsStockByProductCodeAndStoreName");
      }


      let pathParams = {
        'productCode': productCode,
        'storeName': storeName
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = StockWsDTOModel;

      return this.apiClient.callApi(
        '/products/{productCode}/stock/{storeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getProductsStockByProductCodeAndStoreName
     * Returns product&#39;s stock level for a particular store (POS). 
     * @param {String} productCode Product identifier
     * @param {String} storeName Store identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/StockWsDTOModel}
     */
    getProductsStockByProductCodeAndStoreName(productCode, storeName, opts) {
      return this.productsStockByProductCodeAndStoreNameWithHttpInfo(productCode, storeName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * getProductSuggestions
     * Returns a list of all available suggestions related to a given term and limits the results to a specific value of the max parameter. 
     * @param {String} max Specifies the limit of results.
     * @param {String} term Specified term
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:models/SuggestionListWsDTOModel} and HTTP response
     */
    productsSuggestionsWithHttpInfo(max, term, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'max' is set
      if (max === undefined || max === null) {
        throw new Error("Missing the required parameter 'max' when calling getProductSuggestions");
      }

      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling getProductSuggestions");
      }


      let pathParams = {
      };
      let queryParams = {
        'max': max,
        'term': term,
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SuggestionListWsDTOModel;

      return this.apiClient.callApi(
        '/products/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * getProductSuggestions
     * Returns a list of all available suggestions related to a given term and limits the results to a specific value of the max parameter. 
     * @param {String} max Specifies the limit of results.
     * @param {String} term Specified term
     * @param {Object} opts Optional parameters
     * @param {String} opts.fields Response configuration (list of fields, which should be returned in response)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:models/SuggestionListWsDTOModel}
     */
    getProductSuggestions(max, term, opts) {
      return this.productsSuggestionsWithHttpInfo(max, term, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
