/**
 * OCC
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../config'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../config'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Occ);
  }
}(this, function (expect, Occ) {
  'use strict';

  var instance;
  const {
    product,
    search,
    searchResults,
    sampleProduct,
    store,
    productSuggestion,
    productReview
  } = Occ.default;

    beforeEach(function () {
      instance = new Occ.default.ProductsApi();
    });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductsApi', function () {
    describe('getProduct', function () {
      it('should call getProduct successfully', function (done) {
        instance.getProduct(sampleProduct.code)
          .then((res) => {
            expect(res.name).to.equal(sampleProduct.name);
            done();
          })
      });
    });
    describe('getProductExpressupdate', function () {
      it('should call getProductExpressupdate successfully', function (done) {
        // unsupported
        done();
      });
    });
    describe('getProductReferences', function () {
      it('should call getProductReferences successfully', function (done) {
        // instance.getProductReferences(sampleProduct.code, {referenceType: 'a'})
        //   .then((res) => {
        //     done();
        //   })
        //   .catch((err) => {
        //     console.log(err)
        //   })
          done();
      });
    });
    describe('getProductReviews', function () {
      it('should call getProductReviews successfully', function (done) {
        instance.getProductReviews(sampleProduct.code)
          .then((res) => {
            expect(res).to.have.property('reviews');
            done();
          })
      });
    });
    describe('postProductReview', function () {
      it('should call postProductReview successfully', function (done) {
        instance.postProductReview(sampleProduct.code, productReview)
          .then((res) => {
            expect(res.headline).to.equal(productReview.headline);
            done();
          })
      });
    });
    describe('getProductSearch', function () {
      it('should call getProductSearch successfully', function (done) {
        instance.getProductSearch(search)
          .then((res) => {
            expect(res.freeTextSearch).to.equal(searchResults.freeTextSearch);
            expect(res.sorts).to.eql(searchResults.sorts);
            expect(res.products[0].code).to.equal(sampleProduct.code);
            done();
          })
      });
    });
    describe('getProductStock', function () {
      it('should call getProductStock successfully', function (done) {
        instance.getProductStock(sampleProduct.code, {location: store.name})
          .then((res) => {
            expect(res.stores[0].name).to.equal(store.name);
            expect(res.product.code).to.equal(sampleProduct.code);
            done();
          })
      });
    });
    describe('getProductsStockByProductCodeAndStoreName', function () {
      it('should call getProductsStockByProductCodeAndStoreName successfully', function (done) {
        instance.getProductsStockByProductCodeAndStoreName(sampleProduct.code, store.name)
          .then((res) => {
            expect(res.stockLevelStatus).to.equal(store.stockLevelStatus);
            expect(res.stockLevel).to.equal(store.stockLevel);
            done();
          })
      });
    });
    describe('getProductSuggestions', function () {
      it('should call getProductSuggestions successfully', function (done) {
        instance.getProductSuggestions(productSuggestion.max, productSuggestion.term)
          .then((res) => {
            expect(res.suggestions).to.eql(productSuggestion.answer);
            done();
          })
      });
    });
  });

}));